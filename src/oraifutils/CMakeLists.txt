CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(ORAIFUTILS CXX)

# Library version information
SET(ORAIFUTILS_MAJOR_VERSION 1)
SET(ORAIFUTILS_MINOR_VERSION 1)
SET(ORAIFUTILS_PATCH_VERSION 9) 
SET(ORAIFUTILS_VERSION ${ORAIFUTILS_MAJOR_VERSION}.${ORAIFUTILS_MINOR_VERSION}.${ORAIFUTILS_PATCH_VERSION})

# Require at least ITK 3.20
SET(ITK_MIN_VERSION "3.20")
FIND_PACKAGE(ITK) 
IF(NOT ITK_FOUND)
  MESSAGE(SEND_ERROR "ITK ${ITK_MIN_VERSION} not found.  Please set the ITK_DIR variable.")
ELSE(NOT ITK_FOUND)
  # The version check fails with cmake 2.8.4+linux, manually perform check
  IF("${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}" VERSION_LESS ${ITK_MIN_VERSION})
    MESSAGE(SEND_ERROR "ITK ${ITK_MIN_VERSION} not found (version ${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR} provided).  Please set the ITK_DIR variable.")
  ELSE("${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}" VERSION_LESS ${ITK_MIN_VERSION})
    INCLUDE(${ITK_USE_FILE})
  ENDIF("${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}" VERSION_LESS ${ITK_MIN_VERSION})
ENDIF(NOT ITK_FOUND)

# Require at least VTK 5.6
SET(VTK_MIN_VERSION "5.6")
FIND_PACKAGE(VTK) # NOTE: CMake appears to fail on checking VTK minimum version (at least on win7); ${VTK_MIN_VERSION})
IF(NOT VTK_FOUND)
  # Only give an error if not building within plastimatch
  IF(NOT PLM_BUILD_ORAIFUTILS)
    MESSAGE(SEND_ERROR "VTK ${VTK_MIN_VERSION} not found.  Please set the VTK_DIR variable.")
  ENDIF(NOT PLM_BUILD_ORAIFUTILS)
ELSE(NOT VTK_FOUND)
  # The version check fails with cmake 2.8.4+linux/windows7, manually perform check
  IF("${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}" VERSION_LESS ${VTK_MIN_VERSION})
    MESSAGE(SEND_ERROR "VTK ${VTK_MIN_VERSION} not found (version ${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR} provided).  Please set the VTK_DIR variable.")
  ELSE("${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}" VERSION_LESS ${VTK_MIN_VERSION})
    INCLUDE(${VTK_USE_FILE})
  ENDIF("${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}" VERSION_LESS ${VTK_MIN_VERSION})  
ENDIF(NOT VTK_FOUND)
 
# Add Option to enable Qt Support and build Qt dependent libraries
OPTION(ORAIFUTILS_USE_QT "Build parts of ORAIFUTILS with Qt dependencies" ON)
IF(NOT VTK_FOUND)
  SET(ORAIFUTILS_USE_QT OFF)
ENDIF(NOT VTK_FOUND)
IF(ORAIFUTILS_USE_QT)
  # Require Qt 4.6.0 or later
  SET(QT_MIN_VERSION "4.6.0")
  FIND_PACKAGE(Qt4 ${QT_MIN_VERSION})
  IF(NOT QT4_FOUND)
    MESSAGE(SEND_ERROR "Qt ${QT_MIN_VERSION} or greater not found.  Please set the QT_QMAKE_EXECUTABLE variable.")
  ELSE(NOT QT4_FOUND)
    INCLUDE(${QT_USE_FILE})
  ENDIF(NOT QT4_FOUND)
ENDIF(ORAIFUTILS_USE_QT)

# Add Option to enable OpenCL Support and build OpenCL dependent libraries
OPTION(ORAIFUTILS_USE_OPENCL "Build parts of ORAIFUTILS with OpenCL dependencies" OFF)
IF(ORAIFUTILS_USE_OPENCL)
  # Add FindOpenCL.cmake to CMAKE_MODULE_PATH
  IF(NOT PLM_BUILD_ORAIFUTILS)
    SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/opencl 
        CACHE STATIC "CMake module path")
  ENDIF(NOT PLM_BUILD_ORAIFUTILS)
  # Require OpenCL 4.0.0 or later
  SET(OPENCL_MIN_VERSION "4.0.0")
  FIND_PACKAGE(OpenCL ${OPENCL_MIN_VERSION})
  IF(NOT OPENCL_FOUND)
    MESSAGE(SEND_ERROR "OpenCL ${OPENCL_MIN_VERSION} or greater not found.  Please set the OPENCL_DIR variable.")
  ELSE(NOT OPENCL_FOUND)
    INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIR})
  ENDIF(NOT OPENCL_FOUND)
ENDIF(ORAIFUTILS_USE_OPENCL)

#check for graphics auto-dection
IF(WIN32 AND NOT UNIX)
  IF(NOT DirectX_FOUND)
    MESSAGE(STATUS "Could not find DirectX SDK -> Graphics Memory Autodetection won't be active -> Using defaults")
  ELSE(NOT DirectX_FOUND)
    MESSAGE(STATUS "DIRECTX SDK found.")
  ENDIF(NOT DirectX_FOUND)
ELSEIF(UNIX AND NOT WIN32)
  find_package(NVCtrlLib QUIET)
  IF(NOT NVCtrlLib_FOUND)
    MESSAGE(STATUS "Could not find NVCONTROL LIB -> Graphics Memory Autodetection won't be active -> Using defaults")
  ELSE(NOT NVCtrlLib_FOUND)
    MESSAGE(STATUS "NVCONTROL LIB found.")
  ENDIF(NOT NVCtrlLib_FOUND)
ENDIF(WIN32 AND NOT UNIX)

# Build static libraries by default
# Build ONLY static libraries in MSVC because no exports are defined yet
# FIXME: Add __declspec(dllexport) for MSVC SHARED library support
SET(ORAIFUTILS_LIBRARY_TYPE STATIC)
IF(BUILD_SHARED_LIBS AND NOT MSVC)
  SET(ORAIFUTILS_LIBRARY_TYPE SHARED)
ELSE(BUILD_SHARED_LIBS AND NOT MSVC)
  IF(MSVC)
    MESSAGE(STATUS "Building ORAIFUTILS with SHARED libs in MSVC is currently not supported. -> Building STATIC libs.")
  ENDIF(MSVC)
ENDIF(BUILD_SHARED_LIBS AND NOT MSVC)

# Offer the user the choice of overriding the installation directories
SET(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
SET(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables")
SET(INSTALL_INCLUDE_DIR include CACHE PATH "Installation directory for header files")
SET(INSTALL_DATA_DIR share CACHE PATH "Installation directory for data files")

# Make relative paths absolute (needed later on)
FOREACH(p LIB BIN INCLUDE DATA)
  SET(var INSTALL_${p}_DIR)
  IF(NOT IS_ABSOLUTE "${${var}}")
    SET(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
  ENDIF()
ENDFOREACH()

# Build unit tests
IF(BUILD_TESTING)
  OPTION(ORAIFUTILS_BUILD_TESTING "Build ORAIF unit tests for regression tests and automatic software verification." ON)
ELSE(BUILD_TESTING)
  OPTION(ORAIFUTILS_BUILD_TESTING "Build ORAIF unit tests for regression tests and automatic software verification." OFF)
ENDIF(BUILD_TESTING)
IF(ORAIFUTILS_BUILD_TESTING)
  ENABLE_TESTING()
ENDIF(ORAIFUTILS_BUILD_TESTING)

# set up include-directories
INCLUDE_DIRECTORIES(
  "${ORAIFUTILS_SOURCE_DIR}"   
  "${ORAIFUTILS_BINARY_DIR}")  

# Add sub-directories
SET(ORAIFUTILS_BASICTESTING_SUBDIR testing)
SET(ORAIFUTILS_TOOLS_SUBDIR tools)
SET(ORAIFUTILS_MVC_SUBDIR mvc)
SET(ORAIFUTILS_STRUCTUREACCESS_SUBDIR structureaccess)
SET(ORAIFUTILS_TRANSFORM_SUBDIR transform)
SET(ORAIFUTILS_REGISTRATION_SUBDIR registration)
SET(ORAIFUTILS_IMAGEACCESS_SUBDIR imageaccess)
SET(ORAIFUTILS_IMAGETOOLS_SUBDIR imagetools)
SET(ORAIFUTILS_MODEL_SUBDIR model)
SET(ORAIFUTILS_NREG2D3D_SUBDIR nreg2d3d)
SET(ORAIFUTILS_GUICOMPONENTS_SUBDIR guicomponents)
SET(ORAIFUTILS_OPENCL_SUBDIR opencl)
IF(VTK_FOUND)
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_BASICTESTING_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_TOOLS_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_MVC_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_STRUCTUREACCESS_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_TRANSFORM_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_REGISTRATION_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_IMAGEACCESS_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_IMAGETOOLS_SUBDIR})
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_MODEL_SUBDIR})
ENDIF(VTK_FOUND)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_SUBDIR})
IF(VTK_FOUND)
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_GUICOMPONENTS_SUBDIR})
ENDIF(VTK_FOUND)
IF(ORAIFUTILS_USE_OPENCL AND VTK_FOUND)
  ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_OPENCL_SUBDIR})
ENDIF(ORAIFUTILS_USE_OPENCL AND VTK_FOUND)

# Add all targets to the build-tree export set
IF(VTK_FOUND)
SET(ORAIFUTILS_LIBRARIES
  ORAIFTools
  ORAIFMVC
  ORAIFStructureAccess
  ORAIFTransform
  ORAIFRegistration
  ORAIFImageAccess
  ORAIFImageTools
  ORAIFModel
  ORAIFNReg2D3DMathMethods
  ORAIFNReg2D3DDRREngine
  ORAIFNReg2D3DInterpolation
  ORAIFNReg2D3DTransform
  ORAIFNReg2D3DMetrics
  ORAIFNReg2D3DAlgorithm
  ORAIFGUIComponents
)
ELSE(VTK_FOUND)
SET(ORAIFUTILS_LIBRARIES
  ORAIFNReg2D3DDRREngine
)
ENDIF(VTK_FOUND)
IF(ORAIFUTILS_USE_OPENCL AND VTK_FOUND)
  SET(ORAIFUTILS_LIBRARIES ${ORAIFUTILS_LIBRARIES} ORAIFOpenCLWrapper)
ENDIF(ORAIFUTILS_USE_OPENCL AND VTK_FOUND)
EXPORT(TARGETS ${ORAIFUTILS_LIBRARIES}
  FILE "${ORAIFUTILS_BINARY_DIR}/ORAIFUTILSLibraryDepends.cmake")

# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
EXPORT(PACKAGE ORAIFUTILS)

# Create a ORAIFUTILSConfig.cmake file for the use from the build tree
SET(ORAIFUTILS_INCLUDE_DIRS 
  "${ORAIFUTILS_SOURCE_DIR}" "${ORAIFUTILS_BINARY_DIR}" 
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_BASICTESTING_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_TOOLS_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_MVC_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_STRUCTUREACCESS_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_TRANSFORM_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_REGISTRATION_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_IMAGEACCESS_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_IMAGETOOLS_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_MODEL_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_MATHS_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_DRRENGINE_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_INTERPOLATION_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_TRANSFORM_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_METRIC_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_NREG2D3D_ALGORITHM_SUBDIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_GUICOMPONENTS_SUBDIR}"
)
IF(ORAIFUTILS_USE_OPENCL)
  SET(ORAIFUTILS_INCLUDE_DIRS ${ORAIFUTILS_INCLUDE_DIRS} 
    "${CMAKE_CURRENT_SOURCE_DIR}/${ORAIFUTILS_OPENCL_SUBDIR}"
  )
ENDIF(ORAIFUTILS_USE_OPENCL)
SET(ORAIFUTILS_LIB_DIR 
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_TOOLS_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_MVC_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_STRUCTUREACCESS_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_TRANSFORM_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_REGISTRATION_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_IMAGEACCESS_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_IMAGETOOLS_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_MODEL_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_MATHS_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_DRRENGINE_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_INTERPOLATION_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_TRANSFORM_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_METRIC_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_NREG2D3D_ALGORITHM_SUBDIR}"
  "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_GUICOMPONENTS_SUBDIR}"
)
IF(ORAIFUTILS_USE_OPENCL)
  SET(ORAIFUTILS_LIB_DIR ${ORAIFUTILS_LIB_DIR} 
    "${ORAIFUTILS_BINARY_DIR}/${ORAIFUTILS_OPENCL_SUBDIR}"
  )
ENDIF(ORAIFUTILS_USE_OPENCL)
SET(ORAIFUTILS_CMAKE_DIR "${ORAIFUTILS_BINARY_DIR}")
CONFIGURE_FILE(ORAIFUTILSConfig.cmake.in "${ORAIFUTILS_BINARY_DIR}/ORAIFUTILSConfig.cmake" @ONLY)
CONFIGURE_FILE(ORAIFUTILSConfigVersion.cmake.in "${ORAIFUTILS_BINARY_DIR}/ORAIFUTILSConfigVersion.cmake" @ONLY)

# Install the export set for use with the install-tree
INSTALL(EXPORT ORAIFUTILSLibraryDepends DESTINATION
  "${INSTALL_DATA_DIR}/ORAIFUTILS/CMake"
  COMPONENT dev)

# Create a ORAIFUTILSConfig.cmake file for the use from the install tree
# and install it
SET(ORAIFUTILS_INCLUDE_DIRS "${INSTALL_INCLUDE_DIR}" 
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_BASICTESTING_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_TOOLS_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_MVC_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_STRUCTUREACCESS_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_TRANSFORM_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_REGISTRATION_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_IMAGEACCESS_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_IMAGETOOLS_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_MODEL_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_MATHS_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_DRRENGINE_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_INTERPOLATION_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_TRANSFORM_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_METRIC_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_NREG2D3D_ALGORITHM_SUBDIR}"
  "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_GUICOMPONENTS_SUBDIR}"
)
IF(ORAIFUTILS_USE_OPENCL)
  SET(ORAIFUTILS_INCLUDE_DIRS ${ORAIFUTILS_INCLUDE_DIRS} 
    "${INSTALL_INCLUDE_DIR}/${ORAIFUTILS_OPENCL_SUBDIR}"
  )
ENDIF(ORAIFUTILS_USE_OPENCL)
SET(ORAIFUTILS_LIB_DIR "${INSTALL_LIB_DIR}")
SET(ORAIFUTILS_CMAKE_DIR "${INSTALL_DATA_DIR}/ORAIFUTILS/CMake")
CONFIGURE_FILE(ORAIFUTILSConfig.cmake.in
  "${ORAIFUTILS_BINARY_DIR}/InstallFiles/ORAIFUTILSConfig.cmake" @ONLY)
CONFIGURE_FILE(ORAIFUTILSConfigVersion.cmake.in
  "${ORAIFUTILS_BINARY_DIR}/InstallFiles/ORAIFUTILSConfigVersion.cmake" @ONLY)
INSTALL(FILES
  "${ORAIFUTILS_BINARY_DIR}/InstallFiles/ORAIFUTILSConfig.cmake"
  "${ORAIFUTILS_BINARY_DIR}/InstallFiles/ORAIFUTILSConfigVersion.cmake"
  DESTINATION "${ORAIFUTILS_CMAKE_DIR}" COMPONENT dev)

# Generate Doxygen API documentation
OPTION(ORAIFUTILS_BUILD_API_DOCS "Use Doxygen to create the HTML based ORAIFUTILS API documentation" OFF) 
IF(ORAIFUTILS_BUILD_API_DOCS) 
  FIND_PACKAGE(Doxygen) 
  IF(NOT DOXYGEN_FOUND) 
    MESSAGE(SEND_ERROR "Doxygen is needed to build the ORAIFUTILS API documentation. Please install it correctly") 
  ELSE(NOT DOXYGEN_FOUND) 
    # If Graphviz is installed use the 'dot' tool to generate graphs
    # NOTE: CMake is unable to find DOT on Windows.
    # NOTE: On windows the DOT_PATH must be set in the doxyfile otherwise errors occur. 
    IF(DOXYGEN_DOT_FOUND OR (DOXYGEN_DOT_EXECUTABLE AND DOXYGEN_DOT_PATH))
      SET(HAVEDOT "YES")
      SET(DOTPATH ${DOXYGEN_DOT_PATH})
    ELSE(DOXYGEN_DOT_FOUND OR (DOXYGEN_DOT_EXECUTABLE AND DOXYGEN_DOT_PATH))
      SET(HAVEDOT "NO")
    ENDIF(DOXYGEN_DOT_FOUND OR (DOXYGEN_DOT_EXECUTABLE AND DOXYGEN_DOT_PATH))
    
    # Link to external library documentations through tag-files generated with
    # doxytag -t doc.tag path_to_html_doc.
    # NOTE: The tag files are not contained in the SVN repository.
    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/gdcm-2.0.14.tag)
      SET(TAGFILES "${TAGFILES} \"${CMAKE_CURRENT_SOURCE_DIR}/doc/gdcm-2.0.14.tag=http://gdcm.sourceforge.net/2.0/html\"")
    ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/gdcm-2.0.14.tag)
    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/itk-3.20.tag)
      SET(TAGFILES "${TAGFILES} \"${CMAKE_CURRENT_SOURCE_DIR}/doc/itk-3.20.tag=http://www.itk.org/Doxygen320/html\"")
    ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/itk-3.20.tag)
    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/vtk-5.6.tag)
      SET(TAGFILES "${TAGFILES} \"${CMAKE_CURRENT_SOURCE_DIR}/doc/vtk-5.6.tag=http://www.vtk.org/doc/release/5.6/html\"")
    ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/vtk-5.6.tag)
    # NOTE: Starting with Qt 4.x the html doc was changed to qch files 
    # (not possible to generate tag files for Qt from qch)
    # One must download the separate html documentation for tag file generation
    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/qt-4.6.3.tag)
      SET(TAGFILES "${TAGFILES} \"${CMAKE_CURRENT_SOURCE_DIR}/doc/qt-4.6.3.tag=http://doc.qt.nokia.com/4.6\"")
    ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/qt-4.6.3.tag)
      
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in 
                   ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile  @ONLY) 
    ADD_CUSTOM_TARGET(doc ALL
                   ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doc/Doxyfile
                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc
                   COMMENT "Generating ORAIFUTILS API documentation with doxygen"
                   VERBATIM) 
  ENDIF(NOT DOXYGEN_FOUND)
ENDIF(ORAIFUTILS_BUILD_API_DOCS) 

