--- Plastimatch/src/plastimatch/standalone/qt_util.cxx	2016-08-10 00:01:45.613327191 +0200
+++ GitLabPlastimatch/src/plastimatch/standalone/qt_util.cxx	2016-08-10 00:54:10.316626312 +0200
@@ -1,4 +1,4 @@
-#include "qt_util.h"
+ï»¿#include "qt_util.h"
 #include "itkImage.h"
 #include "itkImageFileReader.h"
 #include "itkImageFileWriter.h"
@@ -1314,7 +1314,7 @@
 
 
 
-void QUTIL::GenSampleCommandFile(QString strPathCommandFile, enRegisterOption regiOption)
+void QUTIL::GenDefaultCommandFile(QString strPathCommandFile, enRegisterOption regiOption)
 {
     ofstream fout;
     fout.open(strPathCommandFile.toLocal8Bit().constData());
@@ -1325,7 +1325,7 @@
         return;
     }
 
-    fout << "# command_file.txt" << endl;
+    fout << "#Plastimatch command file for registration.txt" << endl;
     fout << "[GLOBAL]" << endl;
     fout << "fixed=" << "TBD" << endl;
     fout << "moving=" << "TBD" << endl;
@@ -1353,8 +1353,20 @@
         fout << "background_val=" << "-1024" << endl;
         //fout << "background_val=" << "0" << endl; //-600 in HU //added
         fout << "max_its=" << "50" << endl;
+        break;
 
+    case PLAST_AFFINE:
+        fout << "[STAGE]" << endl;
+        fout << "xform=" << "rigid" << endl;
+        fout << "optim=" << "versor" << endl;
+        fout << "impl=" << "itk" << endl;
+        fout << "threading=" << "openmp" << endl;
+        fout << "background_val=" << "-1024" << endl;
+        //fout << "background_val=" << "0" << endl; //-600 in HU //added
+        fout << "max_its=" << "50" << endl;
+        fout << endl;
         break;
+
     case PLAST_GRADIENT:
         fout << "#For gradient-based searching, moving image should be smaller than fixed image. So, CBCT image might move rather than CT" << endl;
 
@@ -1392,8 +1404,33 @@
             fout << "background_val=" << "-1024" << endl; //-600 in HU //added
            // fout << "img_out=" << "TBD" << endl;
             fout << endl;
-        break;
+        break; 
     }
-
     fout.close();    
 }
+
+
+void QUTIL::GetGeometricLimitFloatImg(FloatImageType::Pointer& spFloatImg, VEC3D& limitStart, VEC3D& limitEnd)
+{
+    if (!spFloatImg)
+    {
+        limitStart.x = 0.0;
+        limitStart.y = 0.0;
+        limitStart.z = 0.0;
+        limitEnd.x = 0.0;
+        limitEnd.y = 0.0;
+        limitEnd.z = 0.0;
+        return;
+    }
+     
+    FloatImageType::SizeType imgSize = spFloatImg->GetLargestPossibleRegion().GetSize();
+    FloatImageType::PointType origin = spFloatImg->GetOrigin();
+    FloatImageType::SpacingType spacing = spFloatImg->GetSpacing();
+
+    limitStart.x = origin[0];
+    limitStart.y = origin[1];
+    limitStart.z = origin[2];
+    limitEnd.x = limitStart.x + (imgSize[0] - 1)*spacing[0];
+    limitEnd.y = limitStart.y + (imgSize[1] - 1)*spacing[1];
+    limitEnd.z = limitStart.z + (imgSize[2] - 1)*spacing[2];
+}
