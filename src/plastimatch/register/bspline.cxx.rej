--- Plastimatch/src/plastimatch/register/bspline.cxx	2016-08-10 00:01:45.586660524 +0200
+++ GitLabPlastimatch/src/plastimatch/register/bspline.cxx	2016-08-10 00:54:10.286626312 +0200
@@ -146,7 +146,7 @@
    Debugging routines
    ----------------------------------------------------------------------- */
 void
-dump_smetric_gradient (Bspline_xform* bxf, Bspline_score* ssd, const char* fn)
+dump_total_gradient (Bspline_xform* bxf, Bspline_score* ssd, const char* fn)
 {
     int i;
     FILE* fp;
@@ -154,7 +154,7 @@
     make_parent_directories (fn);
     fp = fopen (fn, "wb");
     for (i = 0; i < bxf->num_coeff; i++) {
-        fprintf (fp, "%20.20f\n", ssd->smetric_grad[i]);
+        fprintf (fp, "%20.20f\n", ssd->total_grad[i]);
     }
     fclose (fp);
 }
@@ -188,15 +188,10 @@
         std::string fn;
         char buf[1024];
 
-        if (parms->metric_type[0] == REGISTRATION_METRIC_MI_MATTES) {
-            sprintf (buf, "%02d_grad_mi_%03d_%03d.txt", 
-                parms->debug_stage, bst->it, bst->feval);
-        } else {
-            sprintf (buf, "%02d_grad_mse_%03d_%03d.txt", 
-                parms->debug_stage, bst->it, bst->feval);
-        }
+        sprintf (buf, "%02d_grad_%03d_%03d.txt", 
+            parms->debug_stage, bst->it, bst->feval);
         fn = parms->debug_dir + "/" + buf;
-        dump_smetric_gradient (bxf, &bst->ssd, fn.c_str());
+        dump_total_gradient (bxf, &bst->ssd, fn.c_str());
 
         sprintf (buf, "%02d_coeff_%03d_%03d.txt", 
             parms->debug_stage, bst->it, bst->feval);
@@ -331,14 +326,15 @@
     Bspline_landmarks* blm = parms->blm;
 
     int i;
-    float ssd_grad_norm, ssd_grad_mean;
+    double ssd_grad_norm, ssd_grad_mean;
 
     /* Compute gradient statistics */
     ssd_grad_norm = 0;
     ssd_grad_mean = 0;
     for (i = 0; i < bxf->num_coeff; i++) {
         ssd_grad_mean += bst->ssd.total_grad[i];
-        ssd_grad_norm += fabs (bst->ssd.total_grad[i]);
+        ssd_grad_norm += (double) bst->ssd.total_grad[i]
+            * (double) bst->ssd.total_grad[i];
     }
 
     /* Compute total time */
@@ -362,43 +358,48 @@
     }
     logfile_print_score (ssd->score);
     logfile_printf (
-        "NV %6d GM %9.3f GN %9.3f [ %9.3f s ]\n",
-        ssd->num_vox, ssd_grad_mean, ssd_grad_norm, total_time);
+        "NV %6d GM %9.3f GN %9.3g [ %9.3f s ]\n",
+        ssd->num_vox, ssd_grad_mean, sqrt (ssd_grad_norm), total_time);
     
-    /* Second line - smetric(s) */
-    if (ssd->smetric.size() > 1) {
+    /* Second line */
+    if (reg_parms->lambda > 0 || blm->num_landmarks > 0
+        || parms->metric_type.size() > 1)
+    {
+        logfile_printf ("         ");
+        /* Part 1 - smetric(s) */   
         std::vector<float>::const_iterator it_sm = ssd->smetric.begin();
         std::vector<Registration_metric_type>::const_iterator it_st
             = parms->metric_type.begin();
-        logfile_printf ("         ");
         while (it_sm != ssd->smetric.end()) {
             logfile_printf ("%-6s",
                 registration_metric_type_string (*it_st));
             logfile_print_score (*it_sm);
             ++it_sm, ++it_st;
         }
-        logfile_printf ("\n");
-    }
-    
-    /* Second line - extra stats if regularization is enabled */
-    if (reg_parms->lambda > 0 || blm->num_landmarks > 0) {
-        /* Part 2 - regularization metric */
-        if (reg_parms->lambda > 0) {
-            logfile_printf ("RM %9.3f ", 
-                reg_parms->lambda * bst->ssd.rmetric);
-        }
-        /* Part 3 - landmark metric */
-        if (blm->num_landmarks > 0) {
-            logfile_printf ("LM %9.3f ", 
-                blm->landmark_stiffness * bst->ssd.lmetric);
-        }
-        /* Part 4 - timing */
-        if (reg_parms->lambda > 0) {
-            logfile_printf ("[ %9.3f | %9.3f ]\n", 
-                ssd->time_smetric[0], ssd->time_rmetric);
-        } else {
+        if (ssd->smetric.size() > 1
+            && (reg_parms->lambda > 0 || blm->num_landmarks > 0))
+        {
             logfile_printf ("\n");
+            logfile_printf ("         ");
         }
+        if (reg_parms->lambda > 0 || blm->num_landmarks > 0) {
+            /* Part 2 - regularization metric */
+            if (reg_parms->lambda > 0) {
+                logfile_printf ("RM %9.3f ", 
+                    reg_parms->lambda * bst->ssd.rmetric);
+            }
+            /* Part 3 - landmark metric */
+            if (blm->num_landmarks > 0) {
+                logfile_printf ("LM %9.3f ", 
+                    blm->landmark_stiffness * bst->ssd.lmetric);
+            }
+            /* Part 4 - timing */
+            if (reg_parms->lambda > 0) {
+                logfile_printf ("[ %9.3f | %9.3f ]", 
+                    ssd->time_smetric[0], ssd->time_rmetric);
+            }
+        }
+        logfile_printf ("\n");
     }
 }
 
