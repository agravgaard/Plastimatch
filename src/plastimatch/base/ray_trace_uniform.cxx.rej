--- Plastimatch/src/plastimatch/base/ray_trace_uniform.cxx	2016-08-10 00:01:45.566660524 +0200
+++ GitLabPlastimatch/src/plastimatch/base/ray_trace_uniform.cxx	2016-08-10 00:54:10.263292979 +0200
@@ -32,7 +32,6 @@
     double ip1[3];
     double ip2[3];
     double phy_step[3];
-    double phy_step_mag;
 
     int ai[3]={0,0,0};
     double frac[3]={0.0, 0.0, 0.0};
@@ -71,26 +70,16 @@
     phy_step[0] = uv[0] * ray_step;
     phy_step[1] = uv[1] * ray_step;
     phy_step[2] = uv[2] * ray_step;
-    phy_step_mag = vec3_len (phy_step);
 
     // Trace the ray
     z = 0;
-    for (pt = 0; pt < rlen; pt += phy_step_mag)
+    for (pt = 0; pt < rlen; pt += ray_step)
     {
         // Compute a point along the ray
         ipx[0] = ip1[0] + phy_step[0] * z;
         ipx[1] = ip1[1] + phy_step[1] * z;
         ipx[2] = ip1[2] + phy_step[2] * z;
 
-#if defined (commentout)
-        /* OLD VERSION - Compute CT Volume indices @ point */
-        ai[0] = (int) floorf ((ipx[0] - vol->origin[0] + 0.5 * ps[0]) / ps[0]);
-        ai[1] = (int) floorf ((ipx[1] - vol->origin[1] + 0.5 * ps[1]) / ps[1]);
-        ai[2] = (int) floorf ((ipx[2] - vol->origin[2] + 0.5 * ps[2]) / ps[2]);
-        idx = ((ai[2]*vol->dim[1] + ai[1]) * vol->dim[0]) + ai[0];
-        pix_density = img[idx];
-#endif
-
         // NEW VERSION - Compute CT volume indices and their fraction @ point + interpolation
 
         mijk[0] = (float) ((ipx[0] - vol->origin[0])/ps[0]);
@@ -100,13 +89,9 @@
         li_clamp_3d(mijk, mijk_f, mijk_r, li_frac1, li_frac2, vol);
         idx = volume_index (vol->dim, mijk_f);
         pix_density = li_value (li_frac1[0], li_frac2[0], li_frac1[1], li_frac2[1], li_frac1[2], li_frac2[2], idx, img, vol);
-        //if (pt/phy_step_mag < 30 && pt/phy_step_mag > 24){
-        //	printf("%lg - %lg %lg %lg - %lg %lg %lg\n", pt/phy_step_mag, mijk[0], li_frac1[1], li_frac1[2], li_frac2[0], li_frac2[1], li_frac2[2]);}
-        //if (pix_density <= -999 || pix_density >= 4000) {pix_density = -1000;}
-		
+
         // I am passing the current step along the ray (z) through
         // vox_index here... not exactly great but not horrible.
-//        (*callback) (callback_data, z++, ray_step, pix_density);
-        (*callback) (callback_data, z++, phy_step_mag, pix_density);
+        (*callback) (callback_data, z++, ray_step, pix_density);
     }
 }
