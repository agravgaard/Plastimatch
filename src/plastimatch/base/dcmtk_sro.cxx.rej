--- Plastimatch/src/plastimatch/base/dcmtk_sro.cxx	2016-08-10 00:01:45.556660524 +0200
+++ GitLabPlastimatch/src/plastimatch/base/dcmtk_sro.cxx	2016-08-10 00:54:10.249959645 +0200
@@ -8,6 +8,7 @@
 #include "dcmtk/ofstd/ofstream.h"
 #include "dcmtk/dcmdata/dctk.h"
 
+#include "dcmtk_metadata.h"
 #include "dcmtk_module_general_series.h"
 #include "dcmtk_module_general_study.h"
 #include "dcmtk_module_patient.h"
@@ -23,8 +24,8 @@
 void
 Dcmtk_sro::save (
     const Xform::Pointer& xf,
-    const Rt_study_metadata::Pointer& rsm_src,   /* Fixed image */
-    const Rt_study_metadata::Pointer& rsm_reg,   /* Moving image */
+    const Rt_study_metadata::Pointer& rsm_fixed,
+    const Rt_study_metadata::Pointer& rsm_moving,
     const std::string& dicom_dir,
     bool filenames_with_uid)
 {
@@ -40,42 +41,44 @@
 
     Rt_study_metadata::Pointer rsm;
     Metadata::Pointer study_meta;
-    if (!rsm_src || !rsm_reg) {
+    if (!rsm_fixed || !rsm_moving) {
         print_and_exit ("Sorry, anonymous spatial registration objects "
             "are not yet supported.\n");
     }
 
-    /* Not sure about this... */
-    rsm = rsm_src;
-    study_meta = rsm_src->get_study_metadata ();
-
     /* Patient module, general study module */
-    Dcmtk_module_patient::set (dataset, study_meta);
-    Dcmtk_module_general_study::set (dataset, rsm);
+    Dcmtk_module_patient::set (dataset, rsm_fixed->get_study_metadata ());
+    Dcmtk_module_general_study::set (dataset, rsm_fixed);
+    dcmtk_copy_from_metadata (dataset, rsm_fixed->get_study_metadata (),
+        DCM_StudyDescription, "");
 
     /* General series module */
-    Dcmtk_module_general_series::set_sro (dataset, rsm);
+    Dcmtk_module_general_series::set_sro (dataset, rsm_fixed);
 
     /* Spatial registration specific items */
-    std::string sro_sop_instance_uid = dicom_uid(PLM_UID_PREFIX);
+    std::string sro_sop_instance_uid = dicom_uid (PLM_UID_PREFIX);
     dataset->putAndInsertString (DCM_Modality, "REG");
     dataset->putAndInsertString (DCM_SOPClassUID, 
         UID_SpatialRegistrationStorage);
     dataset->putAndInsertString (DCM_SOPInstanceUID, 
         sro_sop_instance_uid.c_str());
 
-    /* Content time is again tricky.  Which reference image should be used?
+    /* Study and content date/time are tricky.  Which image should be used?
        The below is correct for xvi_archive program, but could be made 
        more general. */
+    dataset->putAndInsertOFStringArray (DCM_StudyDate,
+        rsm_moving->get_study_date());
+    dataset->putAndInsertOFStringArray (DCM_StudyTime,
+        rsm_moving->get_study_time());
     dataset->putAndInsertOFStringArray (DCM_ContentDate, 
-        rsm_reg->get_study_date());
+        rsm_moving->get_study_date());
     dataset->putAndInsertOFStringArray (DCM_ContentTime, 
-        rsm_reg->get_study_time());
+        rsm_moving->get_study_time());
 
     /* ReferencedSeriesSequence */
     DcmItem *rss_item = 0;
     DcmItem *ris_item = 0;
-    /* fixed */
+    /* moving */
     dataset->findOrCreateSequenceItem (
         DCM_ReferencedSeriesSequence, rss_item, -2);
     rss_item->findOrCreateSequenceItem (
@@ -83,10 +86,10 @@
     ris_item->putAndInsertString (DCM_ReferencedSOPClassUID,
         UID_CTImageStorage);
     ris_item->putAndInsertString (DCM_ReferencedSOPInstanceUID,
-        rsm_reg->get_slice_uid (0));
+        rsm_moving->get_slice_uid (0));
     rss_item->putAndInsertString (DCM_SeriesInstanceUID,
-        rsm_reg->get_ct_series_uid ());
-    /* moving */
+        rsm_moving->get_ct_series_uid ());
+    /* fixed */
     dataset->findOrCreateSequenceItem (
         DCM_ReferencedSeriesSequence, rss_item, -2);
     rss_item->findOrCreateSequenceItem (
@@ -94,14 +97,14 @@
     ris_item->putAndInsertString (DCM_ReferencedSOPClassUID,
         UID_CTImageStorage);
     ris_item->putAndInsertString (DCM_ReferencedSOPInstanceUID,
-        rsm_src->get_slice_uid (0));
+        rsm_fixed->get_slice_uid (0));
     rss_item->putAndInsertString (DCM_SeriesInstanceUID,
-        rsm_src->get_ct_series_uid ());
+        rsm_fixed->get_ct_series_uid ());
 
     /* FrameOfReferenceUID -- of fixed image */
     dataset->putAndInsertString (
         DCM_FrameOfReferenceUID, 
-        rsm_reg->get_frame_of_reference_uid());
+        rsm_fixed->get_frame_of_reference_uid());
 
     /* Spatial registration module -- fixed image */
     DcmItem *reg_item = 0;
@@ -109,7 +112,7 @@
         DCM_RegistrationSequence, reg_item, -2);
     reg_item->putAndInsertString (
         DCM_FrameOfReferenceUID, 
-        rsm_reg->get_frame_of_reference_uid());
+        rsm_fixed->get_frame_of_reference_uid());
     DcmItem *mr_item = 0;
     reg_item->findOrCreateSequenceItem (
         DCM_MatrixRegistrationSequence, mr_item, -2);
@@ -132,7 +135,7 @@
         DCM_RegistrationSequence, reg_item, -2);
     reg_item->putAndInsertString (
         DCM_FrameOfReferenceUID, 
-        rsm_src->get_frame_of_reference_uid());
+        rsm_moving->get_frame_of_reference_uid());
     reg_item->findOrCreateSequenceItem (
         DCM_MatrixRegistrationSequence, mr_item, -2);
     mr_item->findOrCreateSequenceItem (
@@ -142,32 +145,51 @@
     rtc_item->putAndInsertString (DCM_CodeMeaning, "Visual Alignment");
     mr_item->findOrCreateSequenceItem (DCM_MatrixSequence, m_item, -2);
     std::string matrix_string;
+
     const AffineTransformType::MatrixType& itk_aff_mat 
         = itk_aff->GetMatrix ();
     const AffineTransformType::OutputVectorType& itk_aff_off 
         = itk_aff->GetOffset ();
+
+    printf ("ITK_AFF_OFF\n%f %f %f\n",
+        itk_aff_off[0], itk_aff_off[1], itk_aff_off[2]);
+    
+    /* Nb. ITK does not easily create an inverse affine transform. 
+       Therefore we play with the matrices. */
+    vnl_matrix_fixed< double, 3, 3 > itk_aff_mat_inv =
+        itk_aff_mat.GetInverse();
+    
     matrix_string = string_format (
         "%f\\%f\\%f\\%f\\"
         "%f\\%f\\%f\\%f\\"
         "%f\\%f\\%f\\%f\\"
         "0.0\\0.0\\0.0\\1.0",
-        itk_aff_mat[0][0],
-        itk_aff_mat[0][1],
-        itk_aff_mat[0][2],
-        itk_aff_off[0],
-        itk_aff_mat[1][0],
-        itk_aff_mat[1][1],
-        itk_aff_mat[1][2],
-        itk_aff_off[1],
-        itk_aff_mat[2][0],
-        itk_aff_mat[2][1],
-        itk_aff_mat[2][2],
-        itk_aff_off[2]);
+        itk_aff_mat_inv[0][0],
+        itk_aff_mat_inv[0][1],
+        itk_aff_mat_inv[0][2],
+        - itk_aff_mat_inv[0][0] * itk_aff_off[0]
+        - itk_aff_mat_inv[0][1] * itk_aff_off[1]
+        - itk_aff_mat_inv[0][2] * itk_aff_off[2],
+        itk_aff_mat_inv[1][0],
+        itk_aff_mat_inv[1][1],
+        itk_aff_mat_inv[1][2],
+        - itk_aff_mat_inv[1][0] * itk_aff_off[0]
+        - itk_aff_mat_inv[1][1] * itk_aff_off[1]
+        - itk_aff_mat_inv[1][2] * itk_aff_off[2],
+        itk_aff_mat_inv[2][0],
+        itk_aff_mat_inv[2][1],
+        itk_aff_mat_inv[2][2],
+        - itk_aff_mat_inv[2][0] * itk_aff_off[0]
+        - itk_aff_mat_inv[2][1] * itk_aff_off[1]
+        - itk_aff_mat_inv[2][2] * itk_aff_off[2]
+    );
     m_item->putAndInsertString (DCM_FrameOfReferenceTransformationMatrix,
         matrix_string.c_str());
     m_item->putAndInsertString (DCM_FrameOfReferenceTransformationMatrixType,
         "RIGID");
 
+    printf ("SRO\n%s\n", matrix_string.c_str());
+    
     /* Prepare output file */
     std::string sro_fn;
     if (filenames_with_uid) {
