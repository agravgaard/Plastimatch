--- Plastimatch/src/plastimatch/base/rpl_volume.cxx	2016-08-10 00:01:45.566660524 +0200
+++ GitLabPlastimatch/src/plastimatch/base/rpl_volume.cxx	2016-08-10 00:54:10.263292979 +0200
@@ -11,8 +11,10 @@
 #include "aperture.h"
 #include "interpolate.h"
 #include "compiler_warnings.h"
+#include "file_util.h"
 #include "logfile.h"
 #include "mha_io.h"
+#include "path_util.h"
 #include "plm_int.h"
 #include "plm_math.h"
 #include "plm_image_header.h"
@@ -22,6 +24,7 @@
 #include "ray_trace.h"
 #include "rpl_volume.h"
 #include "volume.h"
+#include "volume_fill.h"
 #include "volume_limit.h"
 #include "volume_macros.h"
 #include "print_and_exit.h"
@@ -386,33 +389,23 @@
 void 
 Rpl_volume::compute_ray_data ()
 {
-    int ires[2];
-
     /* A couple of abbreviations */
     Proj_volume *proj_vol = d_ptr->proj_vol;
     const double *src = proj_vol->get_src();
     const double *nrm = proj_vol->get_nrm();
-    ires[0] = d_ptr->proj_vol->get_image_dim (0);
-    ires[1] = d_ptr->proj_vol->get_image_dim (1);
+    const int *ires = d_ptr->proj_vol->get_image_dim();
     Volume *ct_vol = d_ptr->ct->get_vol();
 
-#ifdef DEBUG
-		lprintf("Proj vol:\n");
-		proj_vol->debug();
-		lprintf("Ref vol:\n");
-		ct_vol->debug();
-#endif
-    
-
-    /* Make two passes through the aperture grid.  The first pass 
-       is used to find the clipping planes.  The second pass actually 
-       traces the rays. */
+    lprintf ("Proj vol:\n");
+    proj_vol->debug ();
+    lprintf ("Ref vol:\n");
+    ct_vol->debug ();
 
     /* Allocate data for each ray */
     if (d_ptr->ray_data) delete[] d_ptr->ray_data;
     d_ptr->ray_data = new Ray_data[ires[0]*ires[1]];
 
-    /* Scan through the aperture -- first pass */
+    /* Scan through the aperture plane */
     for (int r = 0; r < ires[1]; r++) {
         double r_tgt[3];
         double tmp[3];
@@ -515,7 +508,8 @@
     }
 }
 
-/* This function samples the CT into a RPL equivalent geometry */
+/* This function samples the CT into a RPL equivalent geometry.
+   The rpl_volume should be in proj_wed format, not in proj_ct format. */
 void 
 Rpl_volume::compute_rpl_ct_density ()
 {
@@ -533,8 +527,6 @@
     }
     Volume *ct_vol = d_ptr->ct->get_vol();
 
-    /* We don't need to do the first pass, as it was already done for the real rpl_volume */
-
     /* Ahh.  Now we can set the clipping planes and allocate the 
        actual volume. */
     double clipping_dist[2] = {
@@ -683,10 +675,9 @@
     if (d_ptr->front_clipping_dist == DBL_MAX) {
         print_and_exit ("Sorry, total failure intersecting volume (compute_rpl_void)\n");
     }
-#ifdef DEBUG
+
     lprintf ("FPD = %f, BPD = %f\n", 
         d_ptr->front_clipping_dist, d_ptr->back_clipping_dist);
-#endif
 
     /* Ahh.  Now we can set the clipping planes and allocate the 
        actual volume. */
@@ -741,10 +732,10 @@
     if (d_ptr->front_clipping_dist == DBL_MAX) {
         print_and_exit ("Sorry, total failure intersecting volume\n");
     }
-#ifdef DEBUG
+
     lprintf ("FPD = %f, BPD = %f\n", 
         d_ptr->front_clipping_dist, d_ptr->back_clipping_dist);
-#endif
+
     /* Ahh.  Now we can set the clipping planes and allocate the 
        actual volume. */
     double clipping_dist[2] = {
@@ -817,10 +808,10 @@
     if (d_ptr->front_clipping_dist == DBL_MAX) {
         print_and_exit ("Sorry, total failure intersecting volume (compute_rpl_rglength_wo_rg_compensator)\n");
     }
-#ifdef DEBUG
+
     lprintf ("FPD = %f, BPD = %f\n", 
         d_ptr->front_clipping_dist, d_ptr->back_clipping_dist);
-#endif
+
     /* Ahh.  Now we can set the clipping planes and allocate the 
        actual volume. */
 
@@ -871,7 +862,8 @@
 
 double Rpl_volume::compute_farthest_penetrating_ray_on_nrm(float range)
 {
-    int dim[3] = { this->get_vol()->dim[0], this->get_vol()->dim[1], this->get_vol()->dim[2]};
+    //int dim[3] = { this->get_vol()->dim[0], this->get_vol()->dim[1], this->get_vol()->dim[2]};
+    const plm_long *dim = this->get_vol()->dim;
     int idx = 0;
     double POI[3] = {0.0, 0.0, 0.0};
     double tmp[3] = {0.0, 0.0, 0.0};
@@ -979,12 +971,11 @@
     }
 }
 
-/* Resample a Proj_volume into Wed_volume */
+/* Resample a ct or dose volume into a wed_ct or wed_dose volume */
 void 
 Rpl_volume::compute_wed_volume (
     Volume *wed_vol, Volume *in_vol, float background)
 {
-
     /* A couple of abbreviations */
     Proj_volume *proj_vol = d_ptr->proj_vol;
     Volume *rvol = proj_vol->get_vol();
@@ -994,6 +985,9 @@
     const int *ires = proj_vol->get_image_dim();
 
     plm_long wijk[3];  /* Index within wed_volume */
+
+    /* Fill the wed_vol with background values */
+    volume_fill (wed_vol, background);
    
     for (wijk[1] = 0; wijk[1] < ires[1]; wijk[1]++) {
         for (wijk[0] = 0; wijk[0] < ires[0]; wijk[0]++) {
@@ -1009,26 +1003,21 @@
 #if defined (commentout)
 #endif
 
-            /* Make some aliases */
+	    /* Nothing to do if ray misses volume */
             Ray_data *ray_data = &d_ptr->ray_data[ap_idx];
-
-	    //Set the default to background, if ray misses volume
             if (!ray_data->intersects_volume) {
-                for (wijk[2] = 0; wijk[2] < rvol->dim[2]; wijk[2]++) {
-                    plm_long widx = volume_index (rvol->dim, wijk);
-                    wed_vol_img[widx] = background;
-                }
                 continue;
             }
 
-            /* Index within rpl_volume */
+            /* Keep track of index within rpl_volume */
             plm_long rijk[3] = { wijk[0], wijk[1], 0 };
 
-	    /*Perform the clipping, so the projection volume start points are the same*/
-
+	    /*Perform the clipping, so the projection volume 
+              start points are the same */
 	    double ray_start[3];
 	    double ray_end[3];
-	    
+
+            /* GCS FIX: Why do this?  Is the ray data not already valid? */
 	    if (!volume_limit_clip_segment (&d_ptr->ct_limit, ray_start, ray_end, ray_data->p2, ray_data->ip2)) {
                 printf("Error in ray clipping, exiting...\n");
                 return;
@@ -1038,17 +1027,12 @@
             for (wijk[2] = 0; wijk[2] < rvol->dim[2]; wijk[2]++) {
                 plm_long widx = volume_index (rvol->dim, wijk);
 
-		//Set the default to background.
-		wed_vol_img[widx] = background;
-
                 /* Compute the currently required rpl for this step */
                 double req_rpl = wijk[2] * 1.0;
 
                 if (debug) printf ("--- (%d,%f)\n", (int) wijk[2], req_rpl);
 
-                /* Loop through input voxels looking for appropriate 
-                   value */
-
+                /* Loop through input voxels looking for appropriate value */
 		double prev_rpl = 0.;
 
                 while (rijk[2] < rvol->dim[2]) {
@@ -1610,7 +1594,60 @@
 void
 Rpl_volume::save (const char *filename)
 {
-    d_ptr->proj_vol->save (filename);
+    std::string fn_base = strip_extension_if (filename, "rpl");
+    std::string rpl_vol_fn = fn_base + ".rpl";
+
+    /* Save proj volume */
+    std::string proj_vol_fn = fn_base + ".projv";
+    d_ptr->proj_vol->save_projv (proj_vol_fn);
+
+    /* Save ray data */
+    if (d_ptr->ray_data) {
+        std::string raydata_fn = fn_base + ".raydata";
+        FILE *fp = plm_fopen (raydata_fn, "wb");
+        const int *ires = d_ptr->proj_vol->get_image_dim();
+        for (int r = 0; r < ires[1]; r++) {
+            for (int c = 0; c < ires[0]; c++) {
+                int ap_idx = r * ires[0] + c;
+                Ray_data *rd = &d_ptr->ray_data[ap_idx];
+                fprintf (fp, 
+                    "%d %g %g %g %g %g %g %g %g %g "
+                    "%g %g %g %g %g %g %g %g %d\n",
+                    rd->ap_idx, 
+                    rd->ip1[0], rd->ip1[1], rd->ip1[2], 
+                    rd->ip2[0], rd->ip2[1], rd->ip2[2], 
+                    rd->p2[0], rd->p2[1], rd->p2[2], 
+                    rd->ray[0], rd->ray[1], rd->ray[2], 
+                    rd->front_dist, rd->back_dist, 
+                    rd->cp[0], rd->cp[1], rd->cp[2], 
+                    rd->step_offset);
+            }
+        }
+        fclose (fp);
+    }
+
+    /* Don't save aperture (right?) */
+
+    /* Don't save CT image (right?) */
+
+    /* Save remaining private data */
+    FILE *fp = plm_fopen (rpl_vol_fn, "wb");
+    fprintf (fp, "front_clipping_dist = %g\n", d_ptr->front_clipping_dist);
+    fprintf (fp, "back_clipping_dist = %g\n", d_ptr->back_clipping_dist);
+    fprintf (fp, "volume_limit = %g %g %g %g %g %g %d %d %d\n",
+        d_ptr->ct_limit.lower_limit[0],
+        d_ptr->ct_limit.lower_limit[1],
+        d_ptr->ct_limit.lower_limit[2],
+        d_ptr->ct_limit.upper_limit[0],
+        d_ptr->ct_limit.upper_limit[1],
+        d_ptr->ct_limit.upper_limit[2],
+        d_ptr->ct_limit.dir[0],
+        d_ptr->ct_limit.dir[1],
+        d_ptr->ct_limit.dir[2]);
+    fprintf (fp, "min_wed = %g\n", d_ptr->min_wed);
+    fprintf (fp, "max_wed = %g\n", d_ptr->max_wed);
+    fprintf (fp, "min_distance_target = %g\n", d_ptr->min_distance_target);
+    fclose (fp);
 }
 
 void
@@ -1620,15 +1657,45 @@
 }
 
 void
-Rpl_volume::load (const char *filename)
+Rpl_volume::save_img (const char *filename)
+{
+    d_ptr->proj_vol->save_img (filename);
+}
+
+void
+Rpl_volume::save_img (const std::string& filename)
 {
-    d_ptr->proj_vol->load (filename);
+    this->save_img (filename.c_str());
 }
 
 void
-Rpl_volume::load (const std::string& filename)
+Rpl_volume::load_rpl (const char *filename)
 {
-    this->load (filename.c_str());
+    printf ("Loading rpl\n");
+    std::string fn_base = strip_extension_if (filename, "rpl");
+    std::string proj_vol_fn = fn_base + ".projv";
+    printf ("-> %s\n-> %s-> %s\n", 
+        filename, fn_base.c_str(), proj_vol_fn.c_str());
+    d_ptr->proj_vol->load_projv (proj_vol_fn);
+    printf ("Done.\n");
+}
+
+void
+Rpl_volume::load_rpl (const std::string& filename)
+{
+    this->load_rpl (filename.c_str());
+}
+
+void
+Rpl_volume::load_img (const char *filename)
+{
+    d_ptr->proj_vol->load_img (filename);
+}
+
+void
+Rpl_volume::load_img (const std::string& filename)
+{
+    this->load_img (filename.c_str());
 }
 
 float compute_PrSTPR_from_HU(float CT_HU)
@@ -2075,7 +2142,7 @@
 
     Volume::Pointer aperture_vol = d_ptr->aperture->get_aperture_volume ();
     unsigned char *aperture_img = (unsigned char*) aperture_vol->img;
-    for (int i = 0; i < aperture_vol->dim[0] * aperture_vol->dim[0]; i++)
+    for (int i = 0; i < aperture_vol->dim[0] * aperture_vol->dim[1]; i++)
     {
         if (map_wed_min[i] > 0) {
             aperture_img[i] = 1;
@@ -2189,7 +2256,7 @@
 
     Volume::Pointer aperture_vol = d_ptr->aperture->get_aperture_volume ();
     unsigned char *aperture_img = (unsigned char*) aperture_vol->img;
-    for (int i = 0; i < aperture_vol->dim[0] * aperture_vol->dim[0]; i++)
+    for (int i = 0; i < aperture_vol->dim[0] * aperture_vol->dim[1]; i++)
     {
         if (map_wed_min[i] > 0) {
             aperture_img[i] = 1;
