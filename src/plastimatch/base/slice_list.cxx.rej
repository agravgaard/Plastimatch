--- Plastimatch/src/plastimatch/base/slice_list.cxx	2016-08-10 00:01:45.569993857 +0200
+++ GitLabPlastimatch/src/plastimatch/base/slice_list.cxx	2016-08-10 00:54:10.263292979 +0200
@@ -2,6 +2,8 @@
    See COPYRIGHT.TXT and LICENSE.TXT for copyright and license information
    ----------------------------------------------------------------------- */
 #include "plmbase_config.h"
+#include <list>
+#include <deque>
 #include <vector>
 #include <stdio.h>
 #include <stdlib.h>
@@ -13,14 +15,32 @@
 #include "print_and_exit.h"
 #include "slice_list.h"
 
+class Slice_data {
+public:
+    Slice_data () : z(0.f), uid("") { }
+public:
+    float z;
+    std::string uid;
+};
+
+class Slice_group {
+public:
+    Plm_image_header group_pih;
+    /* Slices are sorted in order, starting with origin slice */
+    std::list<Slice_data> slice_data;
+};
+
 class Slice_list_private {
 public:
     bool m_have_pih;
     bool m_have_slice_uids;
     Plm_image_header m_pih;
 
-    /* These must be sorted in order, starting with origin slice */
-    std::vector<std::string> m_ct_slice_uids;
+    // Sorted slices in "ascending z order", starting with origin slice
+    std::vector<Slice_data> sorted_slices;
+    // Slice groups are also sorted in the same order
+    std::list<Slice_group> slice_groups;
+
 public:
     Slice_list_private () {
         this->m_have_pih = false;
@@ -48,7 +68,7 @@
 Slice_list::set_image_header (const Plm_image_header& pih)
 {
     d_ptr->m_pih = pih;
-    d_ptr->m_ct_slice_uids.resize (pih.dim(2));
+    d_ptr->sorted_slices.resize (pih.dim(2));
     d_ptr->m_have_pih = true;
 }
 
@@ -65,31 +85,31 @@
     if (!d_ptr->m_have_slice_uids) {
 	return "";
     }
-    if (index < 0 || ((size_t) index) >= d_ptr->m_ct_slice_uids.size()) {
+    if (index < 0 || ((size_t) index) >= d_ptr->sorted_slices.size()) {
 	return "";
     }
-    return d_ptr->m_ct_slice_uids[index].c_str();
+    return d_ptr->sorted_slices[index].uid.c_str();
 }
 
 void
 Slice_list::reset_slice_uids ()
 {
-    d_ptr->m_ct_slice_uids.clear();
+    d_ptr->sorted_slices.clear();
     if (d_ptr->m_have_pih) {
-        d_ptr->m_ct_slice_uids.resize (d_ptr->m_pih.dim(2));
+        d_ptr->sorted_slices.resize (d_ptr->m_pih.dim(2));
     }
 }
 
 void
 Slice_list::set_slice_uid (int index, const char* slice_uid)
 {
-    if (index >= (int) d_ptr->m_ct_slice_uids.size()) {
+    if (index >= (int) d_ptr->sorted_slices.size()) {
         print_and_exit (
             "Illegal call to Slice_list::set_slice_uid.  "
             "Index %d > Size %d.\n", 
-            index, d_ptr->m_ct_slice_uids.size());
+            index, d_ptr->sorted_slices.size());
     }
-    d_ptr->m_ct_slice_uids[index] = std::string (slice_uid);
+    d_ptr->sorted_slices[index].uid = std::string (slice_uid);
 }
 
 bool
