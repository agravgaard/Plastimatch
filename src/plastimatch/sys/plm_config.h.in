/* -----------------------------------------------------------------------
   See COPYRIGHT.TXT and LICENSE.TXT for copyright and license information
   ----------------------------------------------------------------------- */
#ifndef __plm_config_h__
#define __plm_config_h__

/* Architecture attributes */
#cmakedefine MACHINE_IS_32_BIT 1
#cmakedefine MACHINE_IS_64_BIT 1

/* Major OSes */
#cmakedefine WIN32 1
#cmakedefine UNIX  1
#cmakedefine APPLE 1

/* Compiler attributes */
#cmakedefine HAVE_SYS_STAT_H 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_SYS_STAT_H 1
#cmakedefine OPENMP_FOUND 1
#cmakedefine SSE2_FOUND 1
#cmakedefine SHARED_PTR_USE_MEMORY 1
#cmakedefine TR1_SHARED_PTR_USE_MEMORY 1
#cmakedefine TR1_SHARED_PTR_USE_TR1_MEMORY 1
#define CMAKE_SIZEOF_UINT @CMAKE_SIZEOF_UINT@
#define CMAKE_SIZEOF_ULONG @CMAKE_SIZEOF_ULONG@
#define CMAKE_SIZEOF_SIZE_T @CMAKE_SIZEOF_SIZE_T@
#define PLM_BIG_ENDIAN @PLM_BIG_ENDIAN@

/* External libraries */
#cmakedefine CUDA_FOUND 1
#cmakedefine DCMTK_FOUND 1
#cmakedefine DCMTK_HAVE_CFUNIX_H 1
#cmakedefine DLIB_FOUND 1
#cmakedefine DLIB_HAVE_LIBRARY 1
#cmakedefine FFTW_FOUND 1
#cmakedefine GDCM_FOUND 1
#cmakedefine LIBLBFGS_FOUND 1
#cmakedefine NLOPT_FOUND 1
#cmakedefine OPENCL_FOUND 1
#cmakedefine PANTHEIOS_FOUND 1
#cmakedefine SPECFUN_FOUND 1
#cmakedefine READLINE_FOUND 1
#cmakedefine QT4_FOUND 1

/* User options */
#cmakedefine PLM_BUILD_SHARED_LIBS 1
#cmakedefine PLM_CONFIG_USE_PATCHED_ITK 1
#cmakedefine PLM_CONFIG_VOL_LIST 1

#cmakedefine PLM_CONFIG_LEGACY_BSPLINE_EXTEND 1
#cmakedefine PLM_CONFIG_LEGACY_BSPLINE_XFORM_IO 1
#cmakedefine PLM_CONFIG_LEGACY_MI_METRIC 1

/* Needed for dynamic loading */
#cmakedefine PLM_USE_GPU_PLUGINS 1

/* Dicom attributes.  One and only one of these will be true. */
#cmakedefine PLM_DCM_USE_DCMTK 1
#cmakedefine PLM_DCM_USE_GDCM1 1
#cmakedefine PLM_DCM_USE_GDCM2 1

/* ITK attributes */
#cmakedefine ITK_FOUND 1
#cmakedefine ITK_USE_SYSTEM_GDCM 1

/* Make Microsoft compiler less whiny */
#if _MSC_VER >= 1400
/* 4244 warning convert double to float, etc. */
/* 4251 dll export of std c++ types
   http://msdn.microsoft.com/en-us/library/esew7y1w.aspx */
/* 4305 warning convert double to float, etc. */
/* 4819 warnings generated by itk headers */
/* 4800 warning convert int to bool */
/* 4996 warnings for using functions defined as deprecated */
#pragma warning( disable : 4244 4251 4305 4800 4819 4996 )
#endif

/* Make GCC compiler less whiny */
#if (__GNUC__ >= 4) && (__GNUC_MINOR__ >= 2) && !defined(NVCC)
/* -Wwrite-strings warnings generated when passing literal strings as 
   (non-const?) function parameters */
#pragma GCC diagnostic ignored "-Wwrite-strings"
/* -Wdepricated warnings generated by itk headers */
#pragma GCC diagnostic ignored "-Wdeprecated"
/* -Wno-sign-conversion warnings are generated when comparing signed 
   and unsigned integers -- these should be revisited occasionally 
   to check for actual bugs. */
/* Unfortunately, the below doesn't actually work.  We still get warnings. */
/**** #pragma GCC diagnostic ignored "-Wsign-conversion" */
/* -Wmissing-braces warnings are generated when nested braces aren't used
   for initialization of multi-dimensional array */
#pragma GCC diagnostic ignored "-Wmissing-braces"
#endif
#if (__GNUC__ >= 4) && (__GNUC_MINOR__ >= 8) && !defined(NVCC)
/* -Wunused-local-typedefs is emitted by older versions of ITK */
# pragma GCC diagnostic ignored "-Wunused-local-typedefs"
#endif

/* Make clang compiler less whiny */
#if defined (__clang__)
/* -Wgnu ignores GNU extensions, which is needed to suppress warnings 
   caused by non-compliant vxl header files */
#pragma clang diagnostic ignored "-Wgnu"
/* -Wtautological-compare warnings are generated by comparison expressions 
   which are always true or always false -- usually caused by 
   template expansions */
#pragma clang diagnostic ignored "-Wtautological-compare"
#endif

#if defined(_MSC_VER) && _MSC_VER < 1700
#define inline __inline
#endif

#if defined(_MSC_VER) && _MSC_VER < 1900
#define snprintf _snprintf
#endif

#ifdef __cplusplus
#define EXTERNC extern "C"
#else
#define EXTERNC
#endif

#if ((defined(_WIN32) || defined(WIN32)) && (defined (PLM_USE_GPU_PLUGINS)))
#ifdef plmcuda_EXPORTS
#define plmcuda_EXPORT(f, ...)                                     \
    __declspec(dllexport)                                          \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
 #else
#define plmcuda_EXPORT(f, ...)                                     \
    __declspec(dllimport)                                          \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif

#ifdef plmopencl_EXPORTS
#define plmopencl_EXPORT(f, ...)                                   \
    __declspec(dllexport)                                          \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#else
#define plmopencl_EXPORT(f, ...)                                   \
    __declspec(dllimport)                                          \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif

#else
#define plmcuda_EXPORT(f, ...)                                     \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#define plmopencl_EXPORT(f, ...)                                   \
    f (__VA_ARGS__); typedef f##_t(__VA_ARGS__); 
#endif

#endif /* __plm_config_h__ */
